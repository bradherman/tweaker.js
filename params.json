{"body":"### Welcome to tweaker.js.\r\n\r\nTweaker.js is meant to be a dead simple way to add inline editing to your application (assuming you use jQuery).  Tweaker keeps your styles too, so that you edit in place and see things exactly as they will appear when saved.  Tweaker inserts buttons to save and cancel each editable field as you go, and these can be controlled with a little css.  By default, tweaker uses the id element as the param name, so `<h1 id=\"my_param\">Lorem</h1>` will, when initialized via `$('h1').tweaker({action: '/users/1/edit'})`, generate a post like so when \"save\" is clicked: `http://myurl.com/users/1/edit?my_param=MyNewParamText`\r\n\r\n## Usage\r\n\r\n```javascript\r\n$(function(){\r\n  $(\".editable\").tweaker({method: \"post\", action: \"/users/1/edit\"});\r\n  // method defaults to post, action to the current url\r\n  $(\".finish\").live(\"click\", function(){\r\n    $(\".editable\").tweaker().destroy();\r\n  });\r\n});\r\n```\r\n```html\r\n<h1 class=\"editable\" id=\"name\">Brad</h1>\r\n<p class=\"editable\" id=\"about_me\">My name is Brad.  If I were an animal, I would be a slow loris.</p>\r\n```","google":"","tagline":"tweaker is a super simple plugin for inline editing in your web app","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Tweaker.js"}